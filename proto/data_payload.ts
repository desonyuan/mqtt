// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.0
// source: proto/data_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/dist/cjs/wire";

export const protobufPackage = "proto.data_payload";

export interface Data {
  deviceUuid: string;
  temperature: number;
  humidity: number;
  light: number;
  soilMoisture: number;
  co2: number;
  timestamp: number;
}

export interface DataPayload {
  datasets: Data[];
}

function createBaseData(): Data {
  return { deviceUuid: "", temperature: 0, humidity: 0, light: 0, soilMoisture: 0, co2: 0, timestamp: 0 };
}

export const Data: MessageFns<Data> = {
  encode(message: Data, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceUuid !== "") {
      writer.uint32(10).string(message.deviceUuid);
    }
    if (message.temperature !== 0) {
      writer.uint32(21).float(message.temperature);
    }
    if (message.humidity !== 0) {
      writer.uint32(29).float(message.humidity);
    }
    if (message.light !== 0) {
      writer.uint32(37).float(message.light);
    }
    if (message.soilMoisture !== 0) {
      writer.uint32(45).float(message.soilMoisture);
    }
    if (message.co2 !== 0) {
      writer.uint32(53).float(message.co2);
    }
    if (message.timestamp !== 0) {
      writer.uint32(57).double(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Data {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceUuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.temperature = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.humidity = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 37) {
            break;
          }

          message.light = reader.float();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.soilMoisture = reader.float();
          continue;
        }
        case 6: {
          if (tag !== 53) {
            break;
          }

          message.co2 = reader.float();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.timestamp = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Data {
    return {
      deviceUuid: isSet(object.deviceUuid) ? globalThis.String(object.deviceUuid) : "",
      temperature: isSet(object.temperature) ? globalThis.Number(object.temperature) : 0,
      humidity: isSet(object.humidity) ? globalThis.Number(object.humidity) : 0,
      light: isSet(object.light) ? globalThis.Number(object.light) : 0,
      soilMoisture: isSet(object.soilMoisture) ? globalThis.Number(object.soilMoisture) : 0,
      co2: isSet(object.co2) ? globalThis.Number(object.co2) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: Data): unknown {
    const obj: any = {};
    if (message.deviceUuid !== "") {
      obj.deviceUuid = message.deviceUuid;
    }
    if (message.temperature !== 0) {
      obj.temperature = message.temperature;
    }
    if (message.humidity !== 0) {
      obj.humidity = message.humidity;
    }
    if (message.light !== 0) {
      obj.light = message.light;
    }
    if (message.soilMoisture !== 0) {
      obj.soilMoisture = message.soilMoisture;
    }
    if (message.co2 !== 0) {
      obj.co2 = message.co2;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Data>, I>>(base?: I): Data {
    return Data.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Data>, I>>(object: I): Data {
    const message = createBaseData();
    message.deviceUuid = object.deviceUuid ?? "";
    message.temperature = object.temperature ?? 0;
    message.humidity = object.humidity ?? 0;
    message.light = object.light ?? 0;
    message.soilMoisture = object.soilMoisture ?? 0;
    message.co2 = object.co2 ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseDataPayload(): DataPayload {
  return { datasets: [] };
}

export const DataPayload: MessageFns<DataPayload> = {
  encode(message: DataPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.datasets) {
      Data.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.datasets.push(Data.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataPayload {
    return {
      datasets: globalThis.Array.isArray(object?.datasets) ? object.datasets.map((e: any) => Data.fromJSON(e)) : [],
    };
  },

  toJSON(message: DataPayload): unknown {
    const obj: any = {};
    if (message.datasets?.length) {
      obj.datasets = message.datasets.map((e) => Data.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DataPayload>, I>>(base?: I): DataPayload {
    return DataPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DataPayload>, I>>(object: I): DataPayload {
    const message = createBaseDataPayload();
    message.datasets = object.datasets?.map((e) => Data.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
