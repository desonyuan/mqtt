// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.0
// source: proto/config_payload.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/dist/cjs/wire";

export const protobufPackage = "proto.config_payload";

/** 阈值数据结构 */
export interface ThresholdConfig {
  upperThreshold?: number | undefined;
  lowerThreshold?: number | undefined;
  upperEnabled?: boolean | undefined;
  lowerEnabled?: boolean | undefined;
  dataValueType?: number | undefined;
}

/** 可选的配置更新消息 */
export interface ConfigPayload {
  deviceUuid?:
    | string
    | undefined;
  /** 基础字段 */
  wifiSsid?: string | undefined;
  wifiPassword?: string | undefined;
  deviceMode?:
    | number
    | undefined;
  /** 从设备列表 */
  slaveUuids: string[];
  /** 主设备UUID(仅从设备模式下使用) */
  masterUuid?:
    | string
    | undefined;
  /** 传感器阈值 */
  thresholds: { [key: number]: ThresholdConfig };
  /** 功能开关 */
  pirSensorEnabled?: boolean | undefined;
  lightPwmTarget?: number | undefined;
  pwmEnabled?: boolean | undefined;
}

export interface ConfigPayload_ThresholdsEntry {
  key: number;
  value: ThresholdConfig | undefined;
}

function createBaseThresholdConfig(): ThresholdConfig {
  return {
    upperThreshold: undefined,
    lowerThreshold: undefined,
    upperEnabled: undefined,
    lowerEnabled: undefined,
    dataValueType: undefined,
  };
}

export const ThresholdConfig: MessageFns<ThresholdConfig> = {
  encode(message: ThresholdConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.upperThreshold !== undefined) {
      writer.uint32(13).float(message.upperThreshold);
    }
    if (message.lowerThreshold !== undefined) {
      writer.uint32(21).float(message.lowerThreshold);
    }
    if (message.upperEnabled !== undefined) {
      writer.uint32(24).bool(message.upperEnabled);
    }
    if (message.lowerEnabled !== undefined) {
      writer.uint32(32).bool(message.lowerEnabled);
    }
    if (message.dataValueType !== undefined) {
      writer.uint32(40).uint32(message.dataValueType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ThresholdConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseThresholdConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.upperThreshold = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.lowerThreshold = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.upperEnabled = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.lowerEnabled = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.dataValueType = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ThresholdConfig {
    return {
      upperThreshold: isSet(object.upperThreshold) ? globalThis.Number(object.upperThreshold) : undefined,
      lowerThreshold: isSet(object.lowerThreshold) ? globalThis.Number(object.lowerThreshold) : undefined,
      upperEnabled: isSet(object.upperEnabled) ? globalThis.Boolean(object.upperEnabled) : undefined,
      lowerEnabled: isSet(object.lowerEnabled) ? globalThis.Boolean(object.lowerEnabled) : undefined,
      dataValueType: isSet(object.dataValueType) ? globalThis.Number(object.dataValueType) : undefined,
    };
  },

  toJSON(message: ThresholdConfig): unknown {
    const obj: any = {};
    if (message.upperThreshold !== undefined) {
      obj.upperThreshold = message.upperThreshold;
    }
    if (message.lowerThreshold !== undefined) {
      obj.lowerThreshold = message.lowerThreshold;
    }
    if (message.upperEnabled !== undefined) {
      obj.upperEnabled = message.upperEnabled;
    }
    if (message.lowerEnabled !== undefined) {
      obj.lowerEnabled = message.lowerEnabled;
    }
    if (message.dataValueType !== undefined) {
      obj.dataValueType = Math.round(message.dataValueType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ThresholdConfig>, I>>(base?: I): ThresholdConfig {
    return ThresholdConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ThresholdConfig>, I>>(object: I): ThresholdConfig {
    const message = createBaseThresholdConfig();
    message.upperThreshold = object.upperThreshold ?? undefined;
    message.lowerThreshold = object.lowerThreshold ?? undefined;
    message.upperEnabled = object.upperEnabled ?? undefined;
    message.lowerEnabled = object.lowerEnabled ?? undefined;
    message.dataValueType = object.dataValueType ?? undefined;
    return message;
  },
};

function createBaseConfigPayload(): ConfigPayload {
  return {
    deviceUuid: undefined,
    wifiSsid: undefined,
    wifiPassword: undefined,
    deviceMode: undefined,
    slaveUuids: [],
    masterUuid: undefined,
    thresholds: {},
    pirSensorEnabled: undefined,
    lightPwmTarget: undefined,
    pwmEnabled: undefined,
  };
}

export const ConfigPayload: MessageFns<ConfigPayload> = {
  encode(message: ConfigPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceUuid !== undefined) {
      writer.uint32(10).string(message.deviceUuid);
    }
    if (message.wifiSsid !== undefined) {
      writer.uint32(18).string(message.wifiSsid);
    }
    if (message.wifiPassword !== undefined) {
      writer.uint32(26).string(message.wifiPassword);
    }
    if (message.deviceMode !== undefined) {
      writer.uint32(32).uint32(message.deviceMode);
    }
    for (const v of message.slaveUuids) {
      writer.uint32(42).string(v!);
    }
    if (message.masterUuid !== undefined) {
      writer.uint32(50).string(message.masterUuid);
    }
    Object.entries(message.thresholds).forEach(([key, value]) => {
      ConfigPayload_ThresholdsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.pirSensorEnabled !== undefined) {
      writer.uint32(64).bool(message.pirSensorEnabled);
    }
    if (message.lightPwmTarget !== undefined) {
      writer.uint32(77).float(message.lightPwmTarget);
    }
    if (message.pwmEnabled !== undefined) {
      writer.uint32(80).bool(message.pwmEnabled);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceUuid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.wifiSsid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.wifiPassword = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.deviceMode = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.slaveUuids.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.masterUuid = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = ConfigPayload_ThresholdsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.thresholds[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.pirSensorEnabled = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 77) {
            break;
          }

          message.lightPwmTarget = reader.float();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.pwmEnabled = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigPayload {
    return {
      deviceUuid: isSet(object.deviceUuid) ? globalThis.String(object.deviceUuid) : undefined,
      wifiSsid: isSet(object.wifiSsid) ? globalThis.String(object.wifiSsid) : undefined,
      wifiPassword: isSet(object.wifiPassword) ? globalThis.String(object.wifiPassword) : undefined,
      deviceMode: isSet(object.deviceMode) ? globalThis.Number(object.deviceMode) : undefined,
      slaveUuids: globalThis.Array.isArray(object?.slaveUuids)
        ? object.slaveUuids.map((e: any) => globalThis.String(e))
        : [],
      masterUuid: isSet(object.masterUuid) ? globalThis.String(object.masterUuid) : undefined,
      thresholds: isObject(object.thresholds)
        ? Object.entries(object.thresholds).reduce<{ [key: number]: ThresholdConfig }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = ThresholdConfig.fromJSON(value);
          return acc;
        }, {})
        : {},
      pirSensorEnabled: isSet(object.pirSensorEnabled) ? globalThis.Boolean(object.pirSensorEnabled) : undefined,
      lightPwmTarget: isSet(object.lightPwmTarget) ? globalThis.Number(object.lightPwmTarget) : undefined,
      pwmEnabled: isSet(object.pwmEnabled) ? globalThis.Boolean(object.pwmEnabled) : undefined,
    };
  },

  toJSON(message: ConfigPayload): unknown {
    const obj: any = {};
    if (message.deviceUuid !== undefined) {
      obj.deviceUuid = message.deviceUuid;
    }
    if (message.wifiSsid !== undefined) {
      obj.wifiSsid = message.wifiSsid;
    }
    if (message.wifiPassword !== undefined) {
      obj.wifiPassword = message.wifiPassword;
    }
    if (message.deviceMode !== undefined) {
      obj.deviceMode = Math.round(message.deviceMode);
    }
    if (message.slaveUuids?.length) {
      obj.slaveUuids = message.slaveUuids;
    }
    if (message.masterUuid !== undefined) {
      obj.masterUuid = message.masterUuid;
    }
    if (message.thresholds) {
      const entries = Object.entries(message.thresholds);
      if (entries.length > 0) {
        obj.thresholds = {};
        entries.forEach(([k, v]) => {
          obj.thresholds[k] = ThresholdConfig.toJSON(v);
        });
      }
    }
    if (message.pirSensorEnabled !== undefined) {
      obj.pirSensorEnabled = message.pirSensorEnabled;
    }
    if (message.lightPwmTarget !== undefined) {
      obj.lightPwmTarget = message.lightPwmTarget;
    }
    if (message.pwmEnabled !== undefined) {
      obj.pwmEnabled = message.pwmEnabled;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigPayload>, I>>(base?: I): ConfigPayload {
    return ConfigPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigPayload>, I>>(object: I): ConfigPayload {
    const message = createBaseConfigPayload();
    message.deviceUuid = object.deviceUuid ?? undefined;
    message.wifiSsid = object.wifiSsid ?? undefined;
    message.wifiPassword = object.wifiPassword ?? undefined;
    message.deviceMode = object.deviceMode ?? undefined;
    message.slaveUuids = object.slaveUuids?.map((e) => e) || [];
    message.masterUuid = object.masterUuid ?? undefined;
    message.thresholds = Object.entries(object.thresholds ?? {}).reduce<{ [key: number]: ThresholdConfig }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = ThresholdConfig.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    message.pirSensorEnabled = object.pirSensorEnabled ?? undefined;
    message.lightPwmTarget = object.lightPwmTarget ?? undefined;
    message.pwmEnabled = object.pwmEnabled ?? undefined;
    return message;
  },
};

function createBaseConfigPayload_ThresholdsEntry(): ConfigPayload_ThresholdsEntry {
  return { key: 0, value: undefined };
}

export const ConfigPayload_ThresholdsEntry: MessageFns<ConfigPayload_ThresholdsEntry> = {
  encode(message: ConfigPayload_ThresholdsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).uint32(message.key);
    }
    if (message.value !== undefined) {
      ThresholdConfig.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfigPayload_ThresholdsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfigPayload_ThresholdsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = ThresholdConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfigPayload_ThresholdsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? ThresholdConfig.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: ConfigPayload_ThresholdsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = ThresholdConfig.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfigPayload_ThresholdsEntry>, I>>(base?: I): ConfigPayload_ThresholdsEntry {
    return ConfigPayload_ThresholdsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfigPayload_ThresholdsEntry>, I>>(
    object: I,
  ): ConfigPayload_ThresholdsEntry {
    const message = createBaseConfigPayload_ThresholdsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? ThresholdConfig.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
